version: '3'

services:
  frontend:
    # env_file :
    #   -. .env
    # build:
    #   context : 
    depends_on:
      backend:
        condition: service_healthy
    image: node:18-alpine3.17
    container_name: frontend
    volumes:
      - ./frontend/:/front
    restart: unless-stopped
    # command: "tail -f /dev/null"
    command: sh -cx "apk add curl && npm install && npm start"
    working_dir: /front
    ports:
      - "$FRONTEND_PORT:$FRONTEND_PORT"
    environment:
      FRONTEND_PORT: $FRONTEND_PORT
    healthcheck:
      test: "curl -fsSL http://localhost:$FRONTEND_PORT"
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 3s
  #    # TODO enter port front fefefe

  backend:
    # env_file :
    #   -. .env
    # build:
    #   context : 
    depends_on:
      postgresql:
        condition: service_healthy
    image: node:18-alpine3.17
    container_name: backend
    volumes:
      - ./backend/:/back
    restart: unless-stopped
    # command: "tail -f /dev/null"
    command: sh -cx "apk add curl && npm install && npx prisma db push && npm run start:dev"
    working_dir: /back
    ports:
      - "$BACKEND_PORT:$BACKEND_PORT"
      - 5555:5555 # TODO remove this
    environment:
      BACKEND_PORT: $BACKEND_PORT
      DATABASE_URL: $DATABASE_URL
    networks:
      - db
    healthcheck:
      test: "curl -fsSL http://localhost:$BACKEND_PORT/health"
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 3s
     # TODO enter port front fefefe

  postgresql:
    image: postgres:alpine3.18
    container_name: postgresql
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - db
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_DB: $POSTGRES_DB
    healthcheck:
      test: "pg_isready -U ${POSTGRES_USER}"
      interval: 10s
      timeout: 2s
      retries: 5
      start_period: 2s

  controller:
    container_name: health_controller
    image: hello-world
    restart: 'no'
    networks: 
      - db
    depends_on:
      postgresql:
        condition: service_healthy
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy


volumes:
  db: {}

networks:
  db: